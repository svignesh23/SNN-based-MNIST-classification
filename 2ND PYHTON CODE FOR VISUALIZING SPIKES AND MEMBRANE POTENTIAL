import numpy as np
import matplotlib.pyplot as plt

# Parameters
T = 50  # total time steps
tau_input = 5
tau_feedback = 7
num_inputs = 16
gamma = 0.5
W_feedback = 0.2
np.random.seed(42)

# Generate sparse spike trains with exactly 5 spikes per neuron, spaced apart
spike_trains = np.zeros((num_inputs, T))
for n in range(num_inputs):
    # Enforce spacing between spikes (e.g., minimum 3 time steps apart)
    possible_times = np.arange(0, T, 3)  # 3 time-step gaps
    spike_times = np.random.choice(possible_times, 5, replace=False)
    spike_trains[n, spike_times] = 1

# Exponential decay kernels
A_t = np.exp(-np.arange(T) / tau_input)
B_t = -np.exp(-np.arange(T) / tau_feedback)

# Random weights
W = np.random.uniform(-0.5, 0.5, size=(num_inputs,))
u = np.zeros(T)
S_out = np.zeros(T)

# Convolve input with A(t)
X_total = np.zeros((num_inputs, T))
for n in range(num_inputs):
    X_total[n] = np.convolve(spike_trains[n], A_t, mode='full')[:T]

# Time loop
for t in range(T):
    input_sum = np.sum(W * X_total[:, t])
    u[t] = input_sum + gamma

    # Random spike generation
    spike_prob = 1 / (1 + np.exp(-u[t]))
    S_out[t] = np.random.rand() < spike_prob

    # Apply feedback
    if S_out[t] == 1:
        for tf in range(t, T):
            u[tf] += W_feedback * B_t[tf - t]

# Combined spike train view
plt.figure(figsize=(8, 12))

plt.subplot(3, 1, 1)
for i in range(num_inputs):
    spike_times = np.where(spike_trains[i] == 1)[0]
    plt.stem(spike_times, np.full_like(spike_times, i), linefmt='gray', markerfmt='ko', basefmt=" ")
plt.title("Sparse Input Spike Trains (Sâ‚™)")
plt.ylabel("Neuron Index")
plt.xlabel("Time Step")
plt.yticks(range(num_inputs))
plt.grid(True)

plt.subplot(3, 1, 2)
plt.plot(u, label="Membrane Potential u(t)", color='purple')
plt.title("Membrane Potential with Decay & Feedback")
plt.ylabel("u(t)")
plt.legend()

plt.subplot(3, 1, 3)
plt.stem(range(T), S_out, linefmt='r-', markerfmt='ro', basefmt="k-")
plt.title("Output Spike Train")
plt.xlabel("Time Step")
plt.ylabel("Spike")
plt.tight_layout()
plt.show()

# ðŸ”½ Additional: Individual Spike Trains ðŸ”½
for n in range(num_inputs):
    plt.figure(figsize=(8, 2))
    plt.stem(range(T), spike_trains[n], basefmt="k-", linefmt='g-', markerfmt='go')
    plt.title(f"Input Spike Train S{n+1} (5 spikes)")
    plt.xlabel("Time")
    plt.ylabel("Spike")
    plt.ylim(-0.1, 1.2)
    plt.grid(True)
    plt.tight_layout()
    plt.show()
